diff --git a/cmake/system_check.cmake b/cmake/system_check.cmake
index 94eb0a9..f668875 100644
--- a/cmake/system_check.cmake
+++ b/cmake/system_check.cmake
@@ -18,66 +18,14 @@ if (${HOST_OS} STREQUAL "LINUX")
       endif()
 endif()
 
-
-
-if(CMAKE_COMPILER_IS_GNUCC AND WIN32)
-    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpmachine
-              OUTPUT_VARIABLE OPENBLAS_GCC_TARGET_MACHINE
-              OUTPUT_STRIP_TRAILING_WHITESPACE)
-    if(OPENBLAS_GCC_TARGET_MACHINE MATCHES "amd64|x86_64|AMD64")
-      set(MINGW64 1)
-    endif()
-endif()
-
-# Pretty thorough determination of arch. Add more if needed
-if(CMAKE_CL_64 OR MINGW64)
-  set(X86_64 1)
-elseif(MINGW OR (MSVC AND NOT CMAKE_CROSSCOMPILING))
-  set(X86 1)
-elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc.*|power.*|Power.*")
-  set(PPC 1)
-elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "mips64.*")
-  set(MIPS64 1)
-elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
-  if (NOT BINARY)
-    if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
-      set(X86_64 1)
-    else()
-      set(X86 1)
-    endif()
-  else()
-    if (${BINARY} EQUAL "64")
-       set(X86_64 1)
-    else ()
-       set(X86 1)
-    endif()
-  endif()
-elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i686.*|i386.*|x86.*|amd64.*|AMD64.*")
-  set(X86 1)
-elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")
-  set(ARM 1)
-elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*)")
-  if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
-    set(ARM64 1)
-  else()
-    set(ARM 1)
-  endif()
-elseif (${CMAKE_CROSSCOMPILING})
-   if (${TARGET} STREQUAL "CORE2")
-    if (NOT BINARY)
-       set(X86 1)
-    elseif (${BINARY} EQUAL "64")
-       set(X86_64 1)
-    else ()
-       set(X86 1)
-    endif()
-   elseif (${TARGET} STREQUAL "ARMV7")
-       set(ARM 1)
-   else()
-       set(ARM64 1)
-   endif ()
-else ()
-   message(WARNING "Target ARCH could not be determined, got \"${CMAKE_SYSTEM_PROCESSOR}\"")
+if (${VCPKG_TARGET_ARCHITECTURE} STREQUAL "x86")
+  set(X86 ON)
+elseif (${VCPKG_TARGET_ARCHITECTURE} STREQUAL "x64")
+  set(X86_64 ON)
+elseif (${VCPKG_TARGET_ARCHITECTURE} STREQUAL "arm")
+  set(ARM ON)
+elseif (${VCPKG_TARGET_ARCHITECTURE} STREQUAL "arm64")
+  set(ARM64 ON)
 endif()
 
 if (X86_64)
diff --git a/cmake/prebuild.cmake b/cmake/prebuild.cmake
index e2f2134..9ae9ab8 100644
--- a/cmake/prebuild.cmake
+++ b/cmake/prebuild.cmake
@@ -61,12 +61,6 @@ set(TARGET_CONF_TEMP "${PROJECT_BINARY_DIR}/${TARGET_CONF}.tmp")
 
 # c_check
 set(FU "")
-if (APPLE OR (MSVC AND NOT ${CMAKE_C_COMPILER_ID} MATCHES "Clang"))
-  set(FU "_")
-endif()
-if(MINGW AND NOT MINGW64)
-  set(FU "_")
-endif()
 
 set(COMPILER_ID ${CMAKE_C_COMPILER_ID})
 if (${COMPILER_ID} STREQUAL "GNU")
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5166e27..5f4ad62 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -65,8 +65,8 @@ endif()
 
 message(WARNING "CMake support is experimental. It does not yet support all build options and may not produce the same Makefiles that OpenBLAS ships with.")
 
-include("${PROJECT_SOURCE_DIR}/cmake/utils.cmake")
 include("${PROJECT_SOURCE_DIR}/cmake/system.cmake")
+include("${PROJECT_SOURCE_DIR}/cmake/utils.cmake")
 
 set(OpenBLAS_LIBNAME openblas${SUFFIX64_UNDERSCORE})
 
